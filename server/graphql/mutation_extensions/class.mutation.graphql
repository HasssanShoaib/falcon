input SubjectInput {
    code: String
    name: String
    category: SubjectCategory
    description: String
    faculties: [ID!]
}

input ClassInput {
    subject: ID
    meetingDays: MeetingDay
    meetingHours: String
    room: String
    enrollmentCap: Int
    course: String
    section: String
    faculty: ID
}

input AvailabilityInput {
    M_TH: [String!]!
    T_F: [String!]!
}

type SubjectMutations {
    add(newSubject: SubjectInput!): Subject!
    update(_id: ID!, newSubject: SubjectInput!): Subject!
}

type StatusMutations {
    advance: TermScheduleStatus!
    return: TermScheduleStatus!
}

type ClassMutations {
    add(newClasses: [ClassInput!]!): [Class!]!
    update(_id: ID!, newClass: ClassInput!): Class!
    remove(_id: ID!): Boolean!
}

type FacultiesMutations {
    add(faculties: [ID!]!): [FacultyResponse!]!
    remove(_id: ID!): Boolean!
}

type TermMutations {
    faculties: FacultiesMutations!
    classes: ClassMutations!
    status: StatusMutations!
}

extend type Mutation {
    subject: SubjectMutations!
    termSchedule(_id: ID!): TermMutations!
    addTermSchedule(startYear: Int!, term: Term!): TermSchedule!

    setFacultyAvailability(availability: AvailabilityInput!): Boolean!
    setFacultyFeedback(
        status: FacultyFeedbackStatus!
        rejectionReason: String
        newAvailability: AvailabilityInput
    ): FacultyFeedback!
}
